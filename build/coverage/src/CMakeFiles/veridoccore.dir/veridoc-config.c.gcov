        -:    0:Source:/home/ubuntu/voxygen/verilog-doc/src/veridoc-config.c
        -:    0:Graph:/home/ubuntu/voxygen/verilog-doc/build/coverage/src/CMakeFiles/veridoccore.dir/veridoc-config.gcno
        -:    0:Data:/home/ubuntu/voxygen/verilog-doc/build/coverage/src/CMakeFiles/veridoccore.dir/veridoc-config.gcda
        -:    0:Runs:1
        -:    1:/*!
        -:    2:@file veridoc-config.c
        -:    3:@brief Contains data structures and functions for parsing veridoc configs.
        -:    4:*/
        -:    5:
        -:    6:#include "veridoc-config.h"
        -:    7:
        -:    8:/*!
        -:    9:@brief Parses and returns the config file at the supplied path.
        -:   10:@param [in] config_file_path
        -:   11:@param [in] exe_path - the value of argv[0]
        -:   12:@returns A pointer to the supplied config structure.
        -:   13:*/
        1:   14:veridoc_config * veridoc_config_parse(
        -:   15:    char * config_file_path,
        -:   16:    char * exe_path
        -:   17:){
        -:   18:
        1:   19:    veridoc_config * tr = calloc(1,sizeof(veridoc_config));
        1:   20:    tr -> v_includes = ast_list_new();
        -:   21:
        1:   22:    FILE * fh = fopen(config_file_path, "r");
        -:   23:
        1:   24:    if(fh == NULL){
        1:   25:        printf("ERROR: Could not open config file path: %s\n", 
        -:   26:            config_file_path);
        1:   27:        return NULL;
        -:   28:    }
        -:   29:
    #####:   30:    char * key = calloc(255,sizeof(char));
    #####:   31:    char * value = calloc(1023,sizeof(char));
        -:   32:    
    #####:   33:    while(feof(fh) == 0)
        -:   34:    {
    #####:   35:        char first_on_line = fgetc(fh);
    #####:   36:        if(first_on_line == '#' || first_on_line == ' '){
        -:   37:            // Read until the end of the line and then continue.
    #####:   38:            while(fgetc(fh)!='\n' && !feof(fh)){
        -:   39:                // DO Nothing
        -:   40:            }
        -:   41:        }
    #####:   42:        else if(first_on_line == '\n'){
        -:   43:            // DO nothing, this is an empty line.
        -:   44:        }
        -:   45:        else{
        -:   46:            // This is a line worth parsing!
    #####:   47:            ungetc(first_on_line, fh);
        -:   48:
        -:   49:            // Read upto the equals to get the key:
    #####:   50:            memset(key,'\0',255);
    #####:   51:            fscanf(fh, "%s= ", key);
        -:   52:
        -:   53:            // Now read to the end of the line.
    #####:   54:            int i = 0;
    #####:   55:            char toadd = fgetc(fh);
    #####:   56:            while(toadd == ' ' || toadd == '='){
    #####:   57:                toadd = fgetc(fh);
        -:   58:            }
        -:   59:
    #####:   60:            while(i < 1023 && toadd != '\n' && toadd != '\0' && !feof(fh)){
    #####:   61:                value[i] = toadd;
    #####:   62:                toadd = fgetc(fh);
    #####:   63:                i++;
        -:   64:            }
        -:   65:
    #####:   66:            if(strcmp(key,"project") == 0 && !tr -> v_project)
        -:   67:            {
    #####:   68:                tr -> v_project = value;
    #####:   69:                value = calloc(1023,sizeof(char));
        -:   70:            }
    #####:   71:            else if(strcmp(key,"author") == 0 && !tr -> v_author)
        -:   72:            {
    #####:   73:                tr -> v_author = value;
    #####:   74:                value = calloc(1023,sizeof(char));
        -:   75:            }
    #####:   76:            else if(strcmp(key,"output") == 0 && !tr -> v_output)
        -:   77:            {
    #####:   78:                tr -> v_output= value;
    #####:   79:                value = calloc(1023,sizeof(char));
        -:   80:            }
    #####:   81:            else if(strcmp(key,"version") == 0 && !tr -> v_version)
        -:   82:            {
    #####:   83:                tr -> v_version= value;
    #####:   84:                value = calloc(1023,sizeof(char));
        -:   85:            }
    #####:   86:            else if(strcmp(key,"include") == 0)
        -:   87:            {
    #####:   88:                ast_list_append(tr -> v_includes, value);
    #####:   89:                value = calloc(1023,sizeof(char));
        -:   90:            }
    #####:   91:            else if(strcmp(key,"assets_dir") == 0 && !tr -> v_assets_dir)
        -:   92:            {
    #####:   93:                tr -> v_assets_dir = value;
    #####:   94:                value = calloc(1023,sizeof(char));
        -:   95:            }
    #####:   96:            else if(strcmp(key,"manifest") == 0 && !tr -> v_manifest)
        -:   97:            {
    #####:   98:                tr -> v_manifest = value;
    #####:   99:                value = calloc(1023,sizeof(char));
        -:  100:            }
    #####:  101:            else if(strcmp(key,"top_module") == 0 && !tr -> v_top_module)
        -:  102:            {
    #####:  103:                tr -> v_top_module = value;
    #####:  104:                value = calloc(1023,sizeof(char));
        -:  105:            }
        -:  106:            else
        -:  107:            {
    #####:  108:                if(strlen(key) > 0){
    #####:  109:                printf("Error parsing config : %s\n", config_file_path);
    #####:  110:                printf("Unknown key '%s' ignored\n", key);
    #####:  111:                break;
        -:  112:                }
        -:  113:            }
        -:  114:        }
        -:  115:    }
        -:  116:
        -:  117:    // Make sure we have a proper assets source path.
    #####:  118:    if(tr -> v_assets_dir == NULL)
        -:  119:    {
    #####:  120:        tr -> v_assets_dir = strdup(exe_path);
    #####:  121:        size_t length = strlen(tr -> v_assets_dir);
    #####:  122:        while(length > 0)
        -:  123:        {
    #####:  124:            if(tr -> v_assets_dir[length] == '\\' || 
    #####:  125:               tr -> v_assets_dir[length] == '/')
        -:  126:            {
        -:  127:                break;
        -:  128:            }
        -:  129:            else
        -:  130:            {
    #####:  131:                tr -> v_assets_dir[length] = '\0';
    #####:  132:                length = length - 1;
        -:  133:            }
        -:  134:        }
    #####:  135:        tr -> v_assets_dir = realloc(tr -> v_assets_dir,length+7);
    #####:  136:        strcat(tr -> v_assets_dir, "assets/");
        -:  137:    }
        -:  138:
        -:  139:    // Make sure we have a proper output path.
    #####:  140:    if(tr -> v_output == NULL)
        -:  141:    {
    #####:  142:        tr -> v_output = calloc(16,sizeof(char));
    #####:  143:        strcat(tr -> v_output, "./veridoc-out/");
        -:  144:    }
        -:  145:
    #####:  146:    free(key);
    #####:  147:    free(value);
        -:  148:    
    #####:  149:    return tr;
        -:  150:}
        -:  151:
        -:  152:
        -:  153:/*!
        -:  154:@brief Frees the memory allocated to the supplied config file.
        -:  155:*/
    #####:  156:void veridoc_config_free(
        -:  157:    veridoc_config * tofree
        -:  158:){
    #####:  159:    if(tofree -> v_project)
    #####:  160:        free(tofree -> v_project ); //!< Project / Documentation Set Title.
    #####:  161:    if(tofree -> v_author)
    #####:  162:        free(tofree -> v_author  ); //!< Documentation Authors
    #####:  163:    if(tofree -> v_version)
    #####:  164:        free(tofree -> v_version ); //!< Version Number
        -:  165:    
    #####:  166:    if(tofree)
    #####:  167:        free(tofree);
    #####:  168:}
