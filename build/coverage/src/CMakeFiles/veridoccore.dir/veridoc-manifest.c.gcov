        -:    0:Source:/home/ubuntu/voxygen/verilog-doc/src/veridoc-manifest.c
        -:    0:Graph:/home/ubuntu/voxygen/verilog-doc/build/coverage/src/CMakeFiles/veridoccore.dir/veridoc-manifest.gcno
        -:    0:Data:/home/ubuntu/voxygen/verilog-doc/build/coverage/src/CMakeFiles/veridoccore.dir/veridoc-manifest.gcda
        -:    0:Runs:1
        -:    1:/*!
        -:    2:@file veridoc-manifest.c
        -:    3:@brief Contains common data structures and functions used on the
        -:    4:file manifests
        -:    5:*/
        -:    6:
        -:    7:#include "veridoc-manifest.h"
        -:    8:
        -:    9:
        -:   10:/*!
        -:   11:@brief Parses the supplied manifest file and returns a representation of it.
        -:   12:@param [in] path - The manifest file to parse.
        -:   13:@returns A pointer to the manifest object, or NULL if the file could not be
        -:   14:found or parsed.
        -:   15:*/
    #####:   16:veridoc_manifest * veridoc_manifest_parse(
        -:   17:    char * path
        -:   18:){
    #####:   19:    FILE * fh = fopen(path, "r");
        -:   20:
    #####:   21:    if(fh == NULL){
    #####:   22:        printf("ERROR: Could not open manifest file path: '%s'\n", path);
    #####:   23:        return NULL;
        -:   24:    }
        -:   25:    
    #####:   26:    veridoc_manifest * tr = calloc(1,sizeof(veridoc_manifest));
        -:   27:
    #####:   28:    while(feof(fh) == 0)
        -:   29:    {
    #####:   30:        char first_on_line = fgetc(fh);
    #####:   31:        if(first_on_line == '#' || first_on_line == ' '){
        -:   32:            // Read until the end of the line and then continue.
    #####:   33:            while(fgetc(fh)!='\n' && !feof(fh)){
        -:   34:                // DO Nothing
        -:   35:            }
        -:   36:        }
    #####:   37:        else if(first_on_line == '\n'){
        -:   38:            // DO nothing, this is an empty line.
        -:   39:        }
        -:   40:        else
        -:   41:        {
        -:   42:            // This is a line worth parsing!
        -:   43:            
    #####:   44:            char * line = calloc(1023,sizeof(char));
    #####:   45:            int i = 0;
    #####:   46:            while(i < 1023 && !feof(fh) && first_on_line != '\n'){
    #####:   47:                line[i] = first_on_line;
    #####:   48:                first_on_line = fgetc(fh);
    #####:   49:                i++;
        -:   50:            }
        -:   51:
    #####:   52:            if(strlen(line) <=0)
        -:   53:            {
    #####:   54:                free(line);
    #####:   55:                continue;
        -:   56:            }
        -:   57:
        -:   58:            // Is this line a file or a folder?
    #####:   59:            DIR * d = opendir(line);
        -:   60:
    #####:   61:            if(d)
        -:   62:            {
        -:   63:                // It is a directory.
    #####:   64:                tr -> directory_count += 1;
    #####:   65:                tr -> directories = realloc(tr -> directories, 
    #####:   66:                    tr->directory_count * sizeof(veridoc_manifest_directory));
    #####:   67:                tr -> directories[tr -> directory_count-1].path = line;
        -:   68:            } 
    #####:   69:            else if(errno == ENOTDIR)
        -:   70:            {
        -:   71:                // The path exists, and is a file.
    #####:   72:                tr -> file_count += 1;
    #####:   73:                tr -> files= realloc(tr -> files, 
    #####:   74:                    tr->file_count * sizeof(veridoc_manifest_file));
        -:   75:
    #####:   76:                tr -> files[tr -> file_count-1].path = line;
    #####:   77:                tr -> files[tr -> file_count-1].parsed = BOOL_FALSE;
    #####:   78:                tr -> files[tr -> file_count-1].parse_success =  BOOL_FALSE;
        -:   79:            }
    #####:   80:            else if(errno == ENOENT)
        -:   81:            {
    #####:   82:                printf("ERROR: no such manifest path:'%s'.\n", line);
        -:   83:            }
        -:   84:            else
        -:   85:            {
        -:   86:                // The specified file does not exist.
    #####:   87:                printf("ERROR: unknown error with manifest path:'%s'.\n", line);
        -:   88:            }
        -:   89:        }
        -:   90:    }
        -:   91:    
    #####:   92:    return tr;
        -:   93:
        -:   94:}
        -:   95:
        -:   96:/*!
        -:   97:@brief Frees a file manifest from memory.
        -:   98:*/
    #####:   99:void veridoc_manifest_free(
        -:  100:    veridoc_manifest * tofree
        -:  101:){
        -:  102:
        -:  103:    int d;
    #####:  104:    for(d = 0; d < tofree -> directory_count; d++)
        -:  105:    {
    #####:  106:        free(tofree -> directories[d].path);
        -:  107:    }
        -:  108:
        -:  109:    int f;
    #####:  110:    for(f = 0; f < tofree -> directory_count; f++)
        -:  111:    {
    #####:  112:        free(tofree -> files[f].path);
        -:  113:    }
        -:  114:
    #####:  115:    free(tofree -> files);
    #####:  116:    free(tofree -> directories);
    #####:  117:    free(tofree);
    #####:  118:}
