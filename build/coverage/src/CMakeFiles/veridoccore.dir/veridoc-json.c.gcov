        -:    0:Source:/home/ubuntu/voxygen/verilog-doc/src/veridoc-json.c
        -:    0:Graph:/home/ubuntu/voxygen/verilog-doc/build/coverage/src/CMakeFiles/veridoccore.dir/veridoc-json.gcno
        -:    0:Data:/home/ubuntu/voxygen/verilog-doc/build/coverage/src/CMakeFiles/veridoccore.dir/veridoc-json.gcda
        -:    0:Runs:1
        -:    1:/*!
        -:    2:@file veridoc-json.c
        -:    3:@brief Provides declarations of utility functions for writing JSON data to
        -:    4:a file stream.
        -:    5:*/
        -:    6:
        -:    7:#include "veridoc-json.h"
        -:    8:
        -:    9:/*!
        -:   10:@brief Creates a new json file handle.
        -:   11:@param[in] path - File path of the file to create / overwrite.
        -:   12:@param[in] varName - The name of the first variable (var) in the file, which
        -:   13:will hold the forthcoming JSON data structure. Iff NULL, no `var X=` will be
        -:   14:emitted.
        -:   15:@returns a json_file construct if the output path can be opened, else NULL.
        -:   16:*/
    #####:   17:json_file * json_new_file(
        -:   18:    char * path
        -:   19:){
    #####:   20:    json_file * tr = calloc(1,sizeof(json_file));
        -:   21:
    #####:   22:    tr -> file_path = path;
    #####:   23:    tr -> fh        = fopen(path, "w");
        -:   24:
    #####:   25:    if(!tr->fh)
        -:   26:    {
    #####:   27:        free(tr);
    #####:   28:        return NULL;
        -:   29:    }
        -:   30:    else
        -:   31:    {
    #####:   32:        return tr;
        -:   33:    }
        -:   34:}
        -:   35:
        -:   36://! Frees the memory allocated to a json_file construct.
    #####:   37:void json_close_file(json_file * tofree)
        -:   38:{
    #####:   39:    if(tofree -> fh)
        -:   40:    {
    #####:   41:        fclose(tofree -> fh);
        -:   42:    }
        -:   43:
    #####:   44:    free(tofree);
    #####:   45:}
        -:   46:
        -:   47://! Creates and returns a new KVP object with the supplied key and datatype.
    #####:   48:json_kvp * json_new_kvp(
        -:   49:    char * key,
        -:   50:    json_kvp_type type
        -:   51:){
    #####:   52:    json_kvp * tr = calloc(1,sizeof(json_kvp));
        -:   53:
    #####:   54:    tr -> key = key;
    #####:   55:    tr -> type = type;
        -:   56:
    #####:   57:    return tr;
        -:   58:}
        -:   59:
        -:   60://! Creates and returns a pointer to a new json object.
    #####:   61:json_object * json_new_object()
        -:   62:{
    #####:   63:    json_object * tr = calloc(1,sizeof(json_object));
    #####:   64:    tr -> kvps = ast_list_new();
    #####:   65:    return tr;
        -:   66:}
        -:   67:
        -:   68:
        -:   69://! Adds a string and associated key to the supplied object.
    #####:   70:void json_object_add_string(
        -:   71:    json_object * obj,
        -:   72:    char * key,
        -:   73:    char * value
        -:   74:){
    #####:   75:    json_kvp * toadd = json_new_kvp(key, JSON_KVP_STR);
    #####:   76:    toadd -> string = value;
    #####:   77:    ast_list_append(obj -> kvps, toadd);
    #####:   78:}
        -:   79:
        -:   80://! Adds an integer and associated key to the supplied object.
    #####:   81:void json_object_add_int(
        -:   82:    json_object * obj,
        -:   83:    char * key,
        -:   84:    int    value
        -:   85:){
    #####:   86:    json_kvp * toadd = json_new_kvp(key, JSON_KVP_INT);
    #####:   87:    toadd -> integer = value;
    #####:   88:    ast_list_append(obj -> kvps, toadd);
    #####:   89:}
        -:   90:
        -:   91://! Adds a list and associated key to the supplied object.
    #####:   92:void json_object_add_list(  
        -:   93:    json_object * obj,
        -:   94:    char * key,
        -:   95:    json_object * value 
        -:   96:){
    #####:   97:    json_kvp * toadd = json_new_kvp(key, JSON_KVP_LIST);
    #####:   98:    toadd -> list = value;
    #####:   99:    ast_list_append(obj -> kvps, toadd);
    #####:  100:}
        -:  101:
        -:  102://! Adds a object and associated key to the supplied object.
    #####:  103:void json_object_add_object(
        -:  104:    json_object * obj,
        -:  105:    char * key,
        -:  106:    json_object * value
        -:  107:){
    #####:  108:    json_kvp * toadd = json_new_kvp(key, JSON_KVP_OBJ);
    #####:  109:    toadd -> object = value;
    #####:  110:    ast_list_append(obj -> kvps, toadd);
    #####:  111:}
        -:  112:
        -:  113:/*!
        -:  114:@brief emits the supplied object into the supplied file, with an optional
        -:  115:variable name.
        -:  116:@param[in] varName - The name of the first variable (var) in the file, which
        -:  117:will hold the forthcoming JSON data structure. Iff NULL, no `var X=` will be
        -:  118:emitted.
        -:  119:@param[in] as_list - Emit using the syntax for a list ([...]) rather than an
        -:  120:object ({...}).
        -:  121:*/
    #####:  122:void json_emit_object(
        -:  123:    json_file   * fh,
        -:  124:    json_object * toemit,
        -:  125:    char        * varName,
        -:  126:    unsigned char as_list
        -:  127:){
    #####:  128:    assert(fh -> fh); // Make sure the file is open!
        -:  129:    
    #####:  130:    if(varName){
        -:  131:        // Should we emit a variable to go with the JSON?
    #####:  132:        fprintf(fh->fh,"var %s = \n", varName);
        -:  133:    }
        -:  134:
        -:  135:    // Now do the actual object emission
    #####:  136:    fprintf(fh->fh, as_list ? "[\n" : "{\n");
        -:  137:    
        -:  138:    unsigned int i;
    #####:  139:    for(i = 0; i < toemit -> kvps -> items; i++)
        -:  140:    {
    #####:  141:        json_kvp * kvp = ast_list_get(toemit -> kvps, i);
        -:  142:
    #####:  143:        if(!as_list){
    #####:  144:            fprintf(fh->fh, "\"%s\" : ", kvp -> key);
        -:  145:        }
        -:  146:
    #####:  147:        switch(kvp -> type)
        -:  148:        {
    #####:  149:            case JSON_KVP_STR:
    #####:  150:                fprintf(fh->fh, "\"%s\"\n", kvp -> string);
    #####:  151:                break;
    #####:  152:            case JSON_KVP_INT:
    #####:  153:                fprintf(fh->fh, "%d\n", kvp -> integer);
    #####:  154:                break;
    #####:  155:            case JSON_KVP_LIST:
    #####:  156:                json_emit_object(fh, kvp -> object, NULL, 1);
    #####:  157:                break;
    #####:  158:            case JSON_KVP_OBJ:
    #####:  159:                json_emit_object(fh, kvp -> object, NULL, 0);
    #####:  160:                break;
        -:  161:        }
        -:  162:
    #####:  163:        if(i < toemit -> kvps -> items - 1){
    #####:  164:            fprintf(fh -> fh, ",");
        -:  165:        }
        -:  166:    }
        -:  167:
    #####:  168:    fprintf(fh->fh, as_list ? "]\n" : "}\n");
        -:  169:
        -:  170:
    #####:  171:    if(varName){
        -:  172:        // Do we need to close off a variable declaration?
    #####:  173:        fprintf(fh->fh,";\n");
        -:  174:    }
    #####:  175:}
